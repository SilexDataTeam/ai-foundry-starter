apiVersion: batch/v1
kind: Job
metadata:
  name: ai-foundry-db-migrate
  namespace: {{ .Values.namespace }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: prisma-migrate
          image: "{{ .Values.image.frontend.repository }}:{{ .Values.image.frontend.tag }}"
          imagePullPolicy: {{ .Values.image.default_pull_policy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              export DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}"
              npx prisma migrate deploy
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ai-foundry-pg-cluster-superuser
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ai-foundry-pg-cluster-superuser
                  key: password
            - name: DB_HOST
              value: "ai-foundry-pg-cluster-rw.{{ .Values.namespace }}.svc.cluster.local"
            - name: DB_NAME
              value: "chat-db"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ai-foundry-db-setup
  namespace: {{ .Values.namespace }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: db-setup
          image: postgres:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              psql -c "CREATE DATABASE \"chat-app\""
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: ai-foundry-pg-cluster-superuser
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ai-foundry-pg-cluster-superuser
                  key: password
            - name: PGHOST
              value: "ai-foundry-pg-cluster-rw.{{ .Values.namespace }}.svc.cluster.local"
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: ai-foundry-backend
  namespace: {{ .Values.namespace }}
spec:
  template:
      metadata:
        annotations:
          autoscaling.knative.dev/min-scale: "{{ .Values.backend.min_scale }}"
      spec:
        containers:
          - image: "{{ .Values.image.backend.repository }}:{{ .Values.image.backend.tag }}"
            imagePullPolicy: {{ .Values.image.default_pull_policy }}
            ports:
              - containerPort: 8080
            env:
              - name: MODEL_GATEWAY_MODEL_ID
                value: {{ .Values.model_id }}
              - name: MODEL_GATEWAY_BASE_URL
                value: http://{{ .Values.namespace }}-kong-proxy.{{ .Values.namespace }}.svc.cluster.local/openai
              - name: DISABLE_TELEMETRY
                value: "{{ .Values.disable_telemetry }}"
              - name: OPENAI_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: openai-api-key
                    key: token
              - name: KEYCLOAK_URL
                value: https://{{ .Values.keycloak.hostname }}
              - name: KEYCLOAK_REALM
                value: {{ .Values.keycloak.realm }}
              - name: FRONTEND_KEYCLOAK_CLIENT_ID
                value: {{ .Values.keycloak_client_id }}
              - name: CORS_ALLOWED_ORIGINS
                value: https://{{ .Values.frontend_hostname }}
              - name: DISABLE_TLS_VERIFY
                value: "{{ .Values.disable_tls_verify }}"
              {{- if .Values.otel.enabled }}
              - name: OTLP_ENDPOINT
                value: {{ .Values.otel.collector_hostname }}:{{ .Values.otel.collector_port }}
              - name: OTLP_INSECURE
                value: "{{ .Values.otel.insecure }}"
              {{- end}}
              - name: USE_CHAIN
                value: {{ .Values.use_chain }}
              - name: EMBEDDING_MODEL_ID
                value: {{ .Values.embedding_model_id }}
              - name: DB_USER
                valueFrom:
                  secretKeyRef:
                    name: ai-foundry-pg-cluster-superuser
                    key: username
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ai-foundry-pg-cluster-superuser
                    key: password
              - name: DB_HOST
                value: "ai-foundry-pg-cluster-rw.{{ .Values.namespace }}.svc.cluster.local"
              - name: DB_NAME
                value: app
              - name: COLLECTION_NAME
                value: {{ .Values.collection_name }}
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: ai-foundry-chat-app
  namespace: {{ .Values.namespace }}
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/min-scale: "{{ .Values.frontend.min_scale }}"
    spec:
      containers:
        - image: "{{ .Values.image.frontend.repository }}:{{ .Values.image.frontend.tag }}"
          imagePullPolicy: {{ .Values.image.default_pull_policy }}
          ports:
            - containerPort: 3000
          env:
            - name: KEYCLOAK_CLIENT_ID
              value: "ai-foundry-chat-app"
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret
                  key: token
            - name: KEYCLOAK_ISSUER
              value: https://{{ .Values.keycloak.hostname }}/realms/{{ .Values.keycloak.realm }}
            - name: NEXTAUTH_URL
              value: https://{{ .Values.frontend_hostname }}
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: nextauth-secret
                  key: token
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: SERVICE_URL
              value: https://{{ .Values.backend_hostname }}/
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ai-foundry-pg-cluster-superuser
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ai-foundry-pg-cluster-superuser
                  key: password
            - name: DB_HOST
              value: "ai-foundry-pg-cluster-rw.{{ .Values.namespace }}.svc.cluster.local"
            - name: DB_NAME
              value: chat-db
          volumeMounts:
            - name: chat-app-data
              mountPath: /workspace/chat-app/data/
      volumes:
        - name: chat-app-data
          emptyDir: {}
---
apiVersion: serving.knative.dev/v1beta1
kind: DomainMapping
metadata:
 name: {{ .Values.frontend_hostname }}
 namespace: {{ .Values.namespace }}
spec:
 ref:
   name: ai-foundry-chat-app
   kind: Service
   apiVersion: serving.knative.dev/v1
---
apiVersion: serving.knative.dev/v1beta1
kind: DomainMapping
metadata:
 name: {{ .Values.backend_hostname }}
 namespace: {{ .Values.namespace }}
spec:
 ref:
   name: ai-foundry-backend
   kind: Service
   apiVersion: serving.knative.dev/v1